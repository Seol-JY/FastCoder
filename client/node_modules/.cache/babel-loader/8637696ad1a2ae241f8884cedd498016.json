{"ast":null,"code":"module.exports = {\n  save: (file, cpm, name, message, correctChr, wrongChr, callback) => {\n    if (name.length && message.length) {\n      const result = {\n        file: file,\n        cpm: cpm,\n        name: name,\n        message: message,\n        correctChr: correctChr,\n        wrongChr: wrongChr\n      };\n      fetch(\"/records\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(result)\n      }).then(res => res.json()).then(res => {\n        if (res.success) {\n          callback(true);\n        } else {\n          alert(res.message);\n        }\n      }).catch(err => {\n        alert(\"서버 연결이 원활하지 않습니다.\\n [\" + err + \"]\");\n      });\n    }\n  },\n  load: page => {\n    return new Promise((resolve, reject) => {\n      fetch(\"/records?page=\" + page, {\n        method: \"GET\"\n      }).then(res => {\n        resolve(res.json());\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n};","map":{"version":3,"names":["module","exports","save","file","cpm","name","message","correctChr","wrongChr","callback","length","result","fetch","method","headers","body","JSON","stringify","then","res","json","success","alert","catch","err","load","page","Promise","resolve","reject"],"sources":["/Users/seol-jy/Desktop/Github_Projects/FastCoder/client/src/utils/fetcher.js"],"sourcesContent":["module.exports =  {\n  save: (file, cpm, name, message, correctChr, wrongChr, callback) => {\n    if (name.length && message.length) {\n      const result = {\n        file: file,\n        cpm: cpm,\n        name: name,\n        message: message,\n        correctChr: correctChr,\n        wrongChr: wrongChr,\n      };\n      \n      fetch(\"/records\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(result),\n      })\n        .then((res) => res.json())\n        .then((res) => {\n          if (res.success) {\n            callback(true);\n          } else {\n            alert(res.message);\n          }\n        })\n        .catch((err) => {\n          alert(\"서버 연결이 원활하지 않습니다.\\n [\"+err+\"]\");\n        });\n    }\n  },\n\n  load: (page) => {\n    return new Promise((resolve, reject) => {\n      fetch(\"/records?page=\" + page, {\n        method: \"GET\",\n      })\n        .then((res) => {\n          resolve(res.json());\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  },\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAkB;EAChBC,IAAI,EAAE,CAACC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,QAAjD,KAA8D;IAClE,IAAIJ,IAAI,CAACK,MAAL,IAAeJ,OAAO,CAACI,MAA3B,EAAmC;MACjC,MAAMC,MAAM,GAAG;QACbR,IAAI,EAAEA,IADO;QAEbC,GAAG,EAAEA,GAFQ;QAGbC,IAAI,EAAEA,IAHO;QAIbC,OAAO,EAAEA,OAJI;QAKbC,UAAU,EAAEA,UALC;QAMbC,QAAQ,EAAEA;MANG,CAAf;MASAI,KAAK,CAAC,UAAD,EAAa;QAChBC,MAAM,EAAE,MADQ;QAEhBC,OAAO,EAAE;UACP,gBAAgB;QADT,CAFO;QAKhBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;MALU,CAAb,CAAL,CAOGO,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,EAQGF,IARH,CAQSC,GAAD,IAAS;QACb,IAAIA,GAAG,CAACE,OAAR,EAAiB;UACfZ,QAAQ,CAAC,IAAD,CAAR;QACD,CAFD,MAEO;UACLa,KAAK,CAACH,GAAG,CAACb,OAAL,CAAL;QACD;MACF,CAdH,EAeGiB,KAfH,CAeUC,GAAD,IAAS;QACdF,KAAK,CAAC,0BAAwBE,GAAxB,GAA4B,GAA7B,CAAL;MACD,CAjBH;IAkBD;EACF,CA/Be;EAiChBC,IAAI,EAAGC,IAAD,IAAU;IACd,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtCjB,KAAK,CAAC,mBAAmBc,IAApB,EAA0B;QAC7Bb,MAAM,EAAE;MADqB,CAA1B,CAAL,CAGGK,IAHH,CAGSC,GAAD,IAAS;QACbS,OAAO,CAACT,GAAG,CAACC,IAAJ,EAAD,CAAP;MACD,CALH,EAMGG,KANH,CAMUC,GAAD,IAAS;QACdK,MAAM,CAACL,GAAD,CAAN;MACD,CARH;IASD,CAVM,CAAP;EAWD;AA7Ce,CAAlB"},"metadata":{},"sourceType":"module"}